import java.security.SecureRandom;
import java.util.Random;

public class PasswordGenerator {

  private static final char[] lowercaseChars = "abcdefghijklmnopqrstuvwxyz".toCharArray();
  private static final char[] uppercaseChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray();
  private static final char[] digitChars = "0123456789".toCharArray();
  private static final char[] symbolChars = "!@#$%^&*()_+-=[]{};':\"\\|,.<>/?".toCharArray();

  public static String generatePassword(int length, boolean includeUppercase, boolean includeLowercase,
                                       boolean includeDigits, boolean includeSymbols) {
    if (length <= 0) {
      throw new IllegalArgumentException("Password length must be positive.");
    }

    StringBuilder password = new StringBuilder();
    Random random = new SecureRandom();

    // Include at least one character from each category if specified
    if (includeUppercase) {
      password.append(uppercaseChars[random.nextInt(uppercaseChars.length)]);
    }
    if (includeLowercase) {
      password.append(lowercaseChars[random.nextInt(lowercaseChars.length)]);
    }
    if (includeDigits) {
      password.append(digitChars[random.nextInt(digitChars.length)]);
    }
    if (includeSymbols) {
      password.append(symbolChars[random.nextInt(symbolChars.length)]);
    }

    // Fill remaining characters with any allowed category
    int remainingLength = length - password.length();
    char[] allChars = combineCharArrays(includeUppercase, includeLowercase,
        includeDigits, includeSymbols);
    for (int i = 0; i < remainingLength; i++) {
      password.append(allChars[random.nextInt(allChars.length)]);
    }

    return password.toString();
  }

  private static char[] combineCharArrays(boolean includeUppercase, boolean includeLowercase,
                                           boolean includeDigits, boolean includeSymbols) {
    int totalLength = 0;
    if (includeUppercase) {
      totalLength += uppercaseChars.length;
    }
    if (includeLowercase) {
      totalLength += lowercaseChars.length;
    }
    if (includeDigits) {
      totalLength += digitChars.length;
    }
    if (includeSymbols) {
      totalLength += symbolChars.length;
    }

    char[] combinedChars = new char[totalLength];
    int index = 0;
    if (includeUppercase) {
      System.arraycopy(uppercaseChars, 0, combinedChars, index, uppercaseChars.length);
      index += uppercaseChars.length;
    }
    if (includeLowercase) {
      System.arraycopy(lowercaseChars, 0, combinedChars, index, lowercaseChars.length);
      index += lowercaseChars.length;
    }
    if (includeDigits) {
      System.arraycopy(digitChars, 0, combinedChars, index, digitChars.length);
      index += digitChars.length;
    }
    if (includeSymbols) {
      System.arraycopy(symbolChars, 0, combinedChars, index, symbolChars.length);
    }
    return combinedChars;
  }

  public static void main(String[] args) {
    // Example usage
    String password = generatePassword(16, true, true, true, true);
    System.out.println("Generated Password: " + password);
  }
}
